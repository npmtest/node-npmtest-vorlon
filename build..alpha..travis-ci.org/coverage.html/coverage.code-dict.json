{"/home/travis/build/npmtest/node-npmtest-vorlon/test.js":"/* istanbul instrument in package npmtest_vorlon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vorlon/lib.npmtest_vorlon.js":"/* istanbul instrument in package npmtest_vorlon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vorlon = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vorlon = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vorlon/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vorlon && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vorlon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vorlon\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vorlon.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vorlon.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vorlon.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vorlon.__dirname + '/lib.npmtest_vorlon.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/server.js":"\"use strict\";\nvar servercontext = require(\"./config/vorlon.servercontext\");\nvar vorlonServer = require(\"./Scripts/vorlon.server\");\nvar vorlonDashboard = require(\"./Scripts/vorlon.dashboard\");\nvar vorlonWebserver = require(\"./Scripts/vorlon.webServer\");\nvar vorlonHttpProxy = require(\"./Scripts/vorlon.httpproxy.server\");\nvar winstonLogger = require(\"./Scripts/vorlon.winstonlogger\");\nvar context = new servercontext.VORLON.DefaultContext();\n// if proxyEnvPort==true start a standalone instance of httpProxy\nif (!context.httpConfig.proxyEnvPort) {\n    //context.logger = new servercontext.VORLON.SimpleConsoleLogger();\n    var logger = new winstonLogger.VORLON.WinstonLogger(context);\n    //WEBSERVER\n    var webServer = new vorlonWebserver.VORLON.WebServer(context);\n    //DASHBOARD\n    var dashboard = new vorlonDashboard.VORLON.Dashboard(context);\n    //VORLON SERVER\n    var server = new vorlonServer.VORLON.Server(context);\n    //VORLON HTTPPROXY\n    var HttpProxy = new vorlonHttpProxy.VORLON.HttpProxy(context, false);\n    webServer.components.push(logger);\n    webServer.components.push(dashboard);\n    webServer.components.push(server);\n    webServer.components.push(HttpProxy);\n    webServer.start();\n}\nelse {\n    var serverProxy = new vorlonHttpProxy.VORLON.HttpProxy(context, true);\n    serverProxy.start();\n}\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/config/vorlon.servercontext.js":"\"use strict\";\nvar httpConfig = require(\"./vorlon.httpconfig\");\nvar baseUrlConfig = require(\"./vorlon.baseurlconfig\");\nvar logConfig = require(\"./vorlon.logconfig\");\nvar pluginsConfig = require(\"./vorlon.pluginsconfig\");\nvar redisConfig = require(\"./vorlon.redisconfig\");\nvar tools = require(\"../Scripts/vorlon.tools\");\nvar VORLON;\n(function (VORLON) {\n    var SimpleConsoleLogger = (function () {\n        function SimpleConsoleLogger() {\n        }\n        SimpleConsoleLogger.prototype.debug = function () {\n            console.log.apply(null, arguments);\n        };\n        SimpleConsoleLogger.prototype.info = function () {\n            console.info.apply(null, arguments);\n        };\n        SimpleConsoleLogger.prototype.warn = function () {\n            console.warn.apply(null, arguments);\n        };\n        SimpleConsoleLogger.prototype.error = function () {\n            console.error.apply(null, arguments);\n        };\n        return SimpleConsoleLogger;\n    }());\n    VORLON.SimpleConsoleLogger = SimpleConsoleLogger;\n    var SessionManager = (function () {\n        function SessionManager() {\n            this.sessions = [];\n        }\n        SessionManager.prototype.add = function (sessionId, session) {\n            session.sessionId = sessionId;\n            this.sessions[sessionId] = session;\n            if (this.logger)\n                this.logger.debug(\"session \" + sessionId + \" added\");\n            if (this.onsessionadded)\n                this.onsessionadded(session);\n        };\n        SessionManager.prototype.get = function (sessionId) {\n            return this.sessions[sessionId];\n        };\n        SessionManager.prototype.remove = function (sessionId) {\n            var session = this.sessions[sessionId];\n            if (this.logger)\n                this.logger.debug(\"session \" + sessionId + \" removed\");\n            delete this.sessions[sessionId];\n            if (this.onsessionremoved)\n                this.onsessionremoved(session);\n        };\n        SessionManager.prototype.update = function (sessionId, session) {\n            this.sessions[sessionId] = session;\n            if (this.logger)\n                this.logger.debug(\"session \" + sessionId + \" update\");\n            if (this.onsessionupdated)\n                this.onsessionupdated(session);\n        };\n        SessionManager.prototype.all = function () {\n            var items = [];\n            for (var n in this.sessions) {\n                items.push(this.sessions[n]);\n            }\n            return items;\n        };\n        return SessionManager;\n    }());\n    VORLON.SessionManager = SessionManager;\n    var Session = (function () {\n        function Session() {\n            this.sessionId = \"\";\n            this.currentClientId = \"\";\n            this.nbClients = -1;\n            this.connectedClients = new Array();\n        }\n        return Session;\n    }());\n    VORLON.Session = Session;\n    var Client = (function () {\n        function Client(clientId, ua, noWindow, socket, displayId, opened) {\n            if (opened === void 0) { opened = true; }\n            this.clientId = clientId;\n            this.ua = ua;\n            this.socket = socket;\n            this.displayId = displayId;\n            this.opened = opened;\n            this.noWindow = noWindow;\n            this.name = tools.VORLON.Tools.GetOperatingSystem(this.ua);\n            this.icon = tools.VORLON.Tools.GetIconSystem(this.name);\n        }\n        Object.defineProperty(Client.prototype, \"data\", {\n            get: function () {\n                return {\n                    \"clientid\": this.clientId,\n                    \"displayid\": this.displayId,\n                    \"ua\": this.ua,\n                    \"identity\": this.identity,\n                    \"name\": this.name,\n                    \"icon\": this.icon,\n                    \"noWindow\": this.noWindow\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Client;\n    }());\n    VORLON.Client = Client;\n    var DefaultContext = (function () {\n        function DefaultContext() {\n            this.httpConfig = new httpConfig.VORLON.HttpConfig();\n            this.baseURLConfig = new baseUrlConfig.VORLON.BaseURLConfig();\n            this.logConfig = new logConfig.VORLON.LogConfig();\n            this.redisConfig = new redisConfig.VORLON.RedisConfig();\n            this.plugins = new pluginsConfig.VORLON.PluginsConfig();\n            this.sessions = new SessionManager();\n        }\n        return DefaultContext;\n    }());\n    VORLON.DefaultContext = DefaultContext;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/config/vorlon.httpconfig.js":"\"use strict\";\nvar fs = require(\"fs\");\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar path = require(\"path\");\nvar config = require(\"./vorlon.configprovider\");\nvar VORLON;\n(function (VORLON) {\n    var HttpConfig = (function () {\n        function HttpConfig() {\n            var catalogdata = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var catalogstring = catalogdata.toString().replace(/^\\uFEFF/, '');\n            var catalog = JSON.parse(catalogstring);\n            if (catalog.useSSL) {\n                this.useSSL = true;\n                this.protocol = \"https\";\n                this.httpModule = https;\n                this.options = {\n                    key: fs.readFileSync(path.join(__dirname, \"../\", catalog.SSLkey)),\n                    cert: fs.readFileSync(path.join(__dirname, \"../\", catalog.SSLcert))\n                };\n            }\n            else {\n                this.useSSL = false;\n                if (catalog.useSSLAzure) {\n                    this.protocol = \"https\";\n                    this.httpModule = http;\n                }\n                else {\n                    this.protocol = \"http\";\n                    this.httpModule = http;\n                }\n            }\n            this.proxyHost = process.env.PROXY_HOST || catalog.proxyHost || 'localhost';\n            this.proxyEnvPort = catalog.proxyEnvPort;\n            if (catalog.proxyEnvPort)\n                this.proxyPort = process.env.PORT;\n            else\n                this.proxyPort = catalog.proxyPort || 5050;\n            this.host = process.env.HOST || catalog.host || 'localhost';\n            this.port = process.env.PORT || catalog.port || 1337;\n            this.proxyPort = catalog.proxyPort || 5050;\n            this.enableWebproxy = catalog.enableWebproxy || false;\n            this.vorlonServerURL = catalog.vorlonServerURL || \"\";\n            this.vorlonProxyURL = catalog.vorlonProxyURL || \"\";\n        }\n        return HttpConfig;\n    }());\n    VORLON.HttpConfig = HttpConfig;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/config/vorlon.configprovider.js":"\"use strict\";\nvar path = require(\"path\");\nvar argv = require('minimist')(process.argv.slice(2));\nvar VORLON;\n(function (VORLON) {\n    var ConfigProvider = (function () {\n        function ConfigProvider() {\n        }\n        ConfigProvider.getConfigPath = function () {\n            return argv.config ? path.join(process.cwd(), argv.config) : path.join(__dirname, \"../config.json\");\n        };\n        return ConfigProvider;\n    }());\n    VORLON.ConfigProvider = ConfigProvider;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/config/vorlon.baseurlconfig.js":"\"use strict\";\nvar fs = require(\"fs\");\nvar config = require(\"./vorlon.configprovider\");\nvar VORLON;\n(function (VORLON) {\n    var BaseURLConfig = (function () {\n        function BaseURLConfig() {\n            var catalogdata = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var catalogstring = catalogdata.toString().replace(/^\\uFEFF/, '');\n            var catalog = JSON.parse(catalogstring);\n            if (catalog.baseURL != undefined) {\n                this.baseURL = process.env.BASE_URL || catalog.baseURL;\n            }\n            else {\n                this.baseURL = \"\";\n            }\n            if (catalog.baseProxyURL != undefined) {\n                this.baseProxyURL = process.env.BASE_PROXY_URL || catalog.baseProxyURL;\n            }\n            else {\n                this.baseProxyURL = \"\";\n            }\n        }\n        return BaseURLConfig;\n    }());\n    VORLON.BaseURLConfig = BaseURLConfig;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/config/vorlon.logconfig.js":"\"use strict\";\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar config = require(\"./vorlon.configprovider\");\nvar VORLON;\n(function (VORLON) {\n    var LogConfig = (function () {\n        function LogConfig() {\n            var configurationFile = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var configurationString = configurationFile.toString().replace(/^\\uFEFF/, '');\n            var configuration = JSON.parse(configurationString);\n            if (configuration.logs) {\n                var logConfig = configuration.logs;\n                var filePath = logConfig.filePath ? logConfig.filePath : path.join(__dirname, \"../\");\n                var vorlonjsFile = logConfig.vorlonLogFileName ? logConfig.vorlonLogFileName : \"vorlonjs.log\";\n                var exceptionFile = logConfig.exceptionsLogFileName ? logConfig.exceptionsLogFileName : \"exceptions.log\";\n                this.vorlonLogFile = path.join(filePath, vorlonjsFile);\n                this.exceptionsLogFile = path.join(filePath, exceptionFile);\n                this.enableConsole = logConfig.enableConsole;\n                this.level = logConfig.level ? logConfig.level : \"info\";\n            }\n            else {\n                this.vorlonLogFile = path.join(__dirname, \"../vorlonjs.log\");\n                this.exceptionsLogFile = path.join(__dirname, \"../exceptions.log\");\n                this.enableConsole = true;\n                this.level = \"info\";\n            }\n        }\n        return LogConfig;\n    }());\n    VORLON.LogConfig = LogConfig;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/config/vorlon.pluginsconfig.js":"\"use strict\";\nvar fs = require(\"fs\");\nvar config = require(\"./vorlon.configprovider\");\nvar VORLON;\n(function (VORLON) {\n    var PluginsConfig = (function () {\n        function PluginsConfig() {\n        }\n        PluginsConfig.prototype.getPluginsFor = function (sessionid, callback) {\n            var configurationFile = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var configurationString = configurationFile.toString().replace(/^\\uFEFF/, '');\n            var configuration = JSON.parse(configurationString);\n            try {\n                var sessionConfig = configuration.sessions[sessionid];\n            }\n            catch (e) {\n                if (!sessionConfig || !sessionConfig.plugins || !sessionConfig.plugins.length) {\n                    sessionConfig = {\n                        includeSocketIO: (configuration.includeSocketIO != undefined) ? configuration.includeSocketIO : true,\n                        plugins: configuration.plugins\n                    };\n                }\n            }\n            if (callback)\n                callback(null, sessionConfig);\n        };\n        PluginsConfig.prototype.setPluginState = function (pluginid, callback) {\n            var configurationFile = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var configurationString = configurationFile.toString().replace(/^\\uFEFF/, '');\n            var configuration = JSON.parse(configurationString);\n            for (var i = 0; i < configuration.plugins.length; i++) {\n                if (configuration.plugins[i].id == pluginid) {\n                    configuration.plugins[i].enabled = !configuration.plugins[i].enabled;\n                    fs.writeFileSync(config.VORLON.ConfigProvider.getConfigPath(), JSON.stringify(configuration, null, 4), \"utf8\");\n                    return callback(null);\n                }\n            }\n            return callback('PluginID unknown');\n        };\n        PluginsConfig.prototype.setPluginName = function (pluginid, name, callback) {\n            var configurationFile = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var configurationString = configurationFile.toString().replace(/^\\uFEFF/, '');\n            var configuration = JSON.parse(configurationString);\n            if (!name) {\n                return callback(true);\n            }\n            for (var i = 0; i < configuration.plugins.length; i++) {\n                if (configuration.plugins[i].id == pluginid) {\n                    configuration.plugins[i].name = name;\n                    fs.writeFileSync(config.VORLON.ConfigProvider.getConfigPath(), JSON.stringify(configuration, null, 4), \"utf8\");\n                    return callback(null);\n                }\n            }\n            return callback('PluginID unknown');\n        };\n        PluginsConfig.prototype.setPluginPanel = function (pluginid, panel, callback) {\n            var configurationFile = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var configurationString = configurationFile.toString().replace(/^\\uFEFF/, '');\n            var configuration = JSON.parse(configurationString);\n            var panelPosible = ['top', 'bottom'];\n            if (!panel) {\n                return callback('Panel must be defined');\n            }\n            if (panelPosible.indexOf(panel) == -1) {\n                return callback('Panel wrong value');\n            }\n            for (var i = 0; i < configuration.plugins.length; i++) {\n                if (configuration.plugins[i].id == pluginid) {\n                    configuration.plugins[i].panel = panel;\n                    fs.writeFileSync(config.VORLON.ConfigProvider.getConfigPath(), JSON.stringify(configuration, null, 4), \"utf8\");\n                    return callback(null);\n                }\n            }\n            return callback('PluginID unknown');\n        };\n        PluginsConfig.prototype.setPluginsPosition = function (positions, callback) {\n            var configurationFile = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\");\n            var configurationString = configurationFile.toString().replace(/^\\uFEFF/, '');\n            var configuration = JSON.parse(configurationString);\n            if (!positions) {\n                return callback('Positions must be defined');\n            }\n            positions = JSON.parse(positions);\n            var lookup = {};\n            var plugins_reorganised = [];\n            for (var i = 0; i < configuration.plugins.length; i++) {\n                lookup[configuration.plugins[i].id] = configuration.plugins[i];\n            }\n            for (var i = 0; i < positions.length; i++) {\n                plugins_reorganised.push(lookup[positions[i]]);\n            }\n            configuration.plugins = plugins_reorganised;\n            fs.writeFileSync(config.VORLON.ConfigProvider.getConfigPath(), JSON.stringify(configuration, null, 4), \"utf8\");\n            return callback('PluginID unknown');\n        };\n        return PluginsConfig;\n    }());\n    VORLON.PluginsConfig = PluginsConfig;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/config/vorlon.redisconfig.js":"\"use strict\";\nvar VORLON;\n(function (VORLON) {\n    var RedisConfig = (function () {\n        function RedisConfig() {\n            this.fackredis = true;\n            this._redisPort = 6379;\n            this._redisMachine = \"\";\n            this._redisPassword = \"\";\n        }\n        return RedisConfig;\n    }());\n    VORLON.RedisConfig = RedisConfig;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/Scripts/vorlon.tools.js":"\"use strict\";\nvar VORLON;\n(function (VORLON) {\n    var Tools = (function () {\n        function Tools() {\n        }\n        Tools.GetIconSystem = function (name) {\n            var os = [\n                { name: ['Windows'], icon: 'windows.png' },\n                { name: ['iOS', 'Macintosh'], icon: 'apple.png' },\n                { name: ['Windows Phone'], icon: 'windows_phone.png' },\n                { name: ['Firefox OS'], icon: 'firefox.png' },\n                { name: ['Kindle'], icon: 'kindle.png' },\n                { name: ['Android'], icon: 'android.png' },\n                { name: ['BlackBerry'], icon: 'bb.png' },\n                { name: ['Linux'], icon: 'linux.png' },\n                { name: ['Linux'], icon: 'nodejs.png' },\n                { name: ['OpenBSD'], icon: 'openbsd.png' },\n                { name: ['Node.js'], icon: 'nodejs.png' },\n            ];\n            for (var i = 0, len = os.length; i < len; i++) {\n                if (os[i].name.indexOf(name) > -1) {\n                    return os[i].icon;\n                }\n            }\n            return 'unknown.png';\n        };\n        Tools.GetOperatingSystem = function (ua) {\n            var currentLowerUA = ua.toLowerCase();\n            // Windows Phone\n            if (currentLowerUA.indexOf(\"windows phone\") >= 0) {\n                return \"Windows Phone\";\n            }\n            // Windows\n            if (currentLowerUA.indexOf(\"windows\") >= 0) {\n                return \"Windows\";\n            }\n            // Android\n            if (currentLowerUA.indexOf(\"android\") >= 0) {\n                return \"Android\";\n            }\n            // iOS\n            if (currentLowerUA.indexOf(\"apple-i\") >= 0) {\n                return \"iOS\";\n            }\n            if (currentLowerUA.indexOf(\"iphone\") >= 0) {\n                return \"iOS\";\n            }\n            if (currentLowerUA.indexOf(\"ipad\") >= 0) {\n                return \"iOS\";\n            }\n            // BlackBerry\n            if (currentLowerUA.indexOf(\"blackberry\") >= 0) {\n                return \"BlackBerry\";\n            }\n            // BlackBerry\n            if (currentLowerUA.indexOf(\"(bb\") >= 0) {\n                return \"BlackBerry\";\n            }\n            // Kindle\n            if (currentLowerUA.indexOf(\"kindle\") >= 0) {\n                return \"Kindle\";\n            }\n            // Macintosh\n            if (currentLowerUA.indexOf(\"macintosh\") >= 0) {\n                return \"Macintosh\";\n            }\n            // Linux\n            if (currentLowerUA.indexOf(\"linux\") >= 0) {\n                return \"Linux\";\n            }\n            // OpenBSD\n            if (currentLowerUA.indexOf(\"openbsd\") >= 0) {\n                return \"OpenBSD\";\n            }\n            // Firefox OS\n            if (currentLowerUA.indexOf(\"firefox\") >= 0) {\n                return \"Firefox OS\"; // Web is the plaform\n            }\n            // Node.js\n            if (currentLowerUA.indexOf(\"node.js\") >= 0) {\n                return \"Node.js\";\n            }\n            return \"Unknown operating system\";\n        };\n        return Tools;\n    }());\n    VORLON.Tools = Tools;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/Scripts/vorlon.server.js":"\"use strict\";\nvar socketio = require(\"socket.io\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar vorloncontext = require(\"../config/vorlon.servercontext\");\nvar VORLON;\n(function (VORLON) {\n    var Server = (function () {\n        function Server(context) {\n            this.dashboards = new Array();\n            this.baseURLConfig = context.baseURLConfig;\n            this.httpConfig = context.httpConfig;\n            this.pluginsConfig = context.plugins;\n            this._log = context.logger;\n            this._sessions = context.sessions;\n        }\n        Server.prototype.noCache = function (res) {\n            //Add header no-cache\n            res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n            res.header('Expires', '-1');\n            res.header('Pragma', 'no-cache');\n        };\n        Server.prototype.addRoutes = function (app, passport) {\n            var _this = this;\n            app.get(this.baseURLConfig.baseURL + \"/api/createsession\", function (req, res) {\n                _this.json(res, _this.guid());\n            });\n            app.get(this.baseURLConfig.baseURL + \"/api/reset/:idSession\", function (req, res) {\n                var session = _this._sessions.get(req.params.idSession);\n                if (session && session.connectedClients) {\n                    for (var client in session.connectedClients) {\n                        delete session.connectedClients[client];\n                    }\n                }\n                _this._sessions.remove(req.params.idSession);\n                _this.noCache(res);\n                res.writeHead(200, {});\n                res.end();\n            });\n            app.get(this.baseURLConfig.baseURL + \"/api/getclients/:idSession\", function (req, res) {\n                var session = _this._sessions.get(req.params.idSession);\n                var clients = new Array();\n                if (session != null) {\n                    var nbClients = 0;\n                    for (var client in session.connectedClients) {\n                        var currentclient = session.connectedClients[client];\n                        if (currentclient.opened) {\n                            clients.push(currentclient.data);\n                            nbClients++;\n                        }\n                    }\n                    _this._sessions.update(req.params.idSession, session);\n                    _this._log.debug(\"API : GetClients nb client \" + nbClients + \" in session \" + req.params.idSession, { type: \"API\", session: req.params.idSession });\n                }\n                else {\n                    _this._log.warn(\"API : No client in session \" + req.params.idSession, { type: \"API\", session: req.params.idSession });\n                }\n                _this.noCache(res);\n                _this.json(res, clients);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.max.js/\", function (req, res) {\n                res.redirect(_this.baseURLConfig.baseURL + \"/vorlon.max.js/default\");\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.max.js/:idsession\", function (req, res) {\n                _this._sendVorlonJSFile(false, req, res);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.js\", function (req, res) {\n                res.redirect(_this.baseURLConfig.baseURL + \"/vorlon.js/default\");\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.js/:idsession\", function (req, res) {\n                _this._sendVorlonJSFile(true, req, res);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.max.autostartdisabled.js\", function (req, res) {\n                _this._sendVorlonJSFile(false, req, res, false);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.autostartdisabled.js\", function (req, res) {\n                _this._sendVorlonJSFile(true, req, res, false);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/getplugins/:idsession\", function (req, res) {\n                _this.noCache(res);\n                _this._sendConfigJson(req, res);\n            });\n            app.post(this.baseURLConfig.baseURL + \"/setplugin/:pluginid/name\", function (req, res) {\n                _this.setPluginName(req, res);\n            });\n            app.post(this.baseURLConfig.baseURL + \"/setplugin/positions\", function (req, res) {\n                _this.setPluginsPosition(req, res);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/setplugin/:pluginid/state\", function (req, res) {\n                _this.setPluginState(req, res);\n            });\n            app.post(this.baseURLConfig.baseURL + \"/setplugin/:pluginid/panel\", function (req, res) {\n                _this.setPluginPanel(req, res);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/getplugin/:pluginfolder/icon\", function (req, res) {\n                _this.noCache(res);\n                _this.sendPluginIcon(req, res);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.node.max.js/\", function (req, res) {\n                res.redirect(\"/vorlon.node.max.js/default\");\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.node.max.js/:idsession\", function (req, res) {\n                _this._sendVorlonJSFile(false, req, res, false, true);\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.node.js/\", function (req, res) {\n                res.redirect(\"/vorlon.node.js/default\");\n            });\n            app.get(this.baseURLConfig.baseURL + \"/vorlon.node.js/:idsession\", function (req, res) {\n                _this._sendVorlonJSFile(true, req, res, false, true);\n            });\n        };\n        Server.prototype.sendPluginIcon = function (req, res) {\n            var pluginfolder = req.params.pluginfolder;\n            try {\n                var icon = fs.readFileSync(path.join(__dirname, \"../public/vorlon/plugins/\" + pluginfolder + \"/icon.png\"));\n                res.writeHead(200, { 'Content-Type': 'image/png' });\n                res.end(icon, 'binary');\n            }\n            catch (err) {\n                var icon = fs.readFileSync(path.join(__dirname, \"../public/images/no_img.png\"));\n                res.writeHead(200, { 'Content-Type': 'image/png' });\n                res.end(icon, 'binary');\n            }\n        };\n        Server.prototype.setPluginState = function (req, res) {\n            var _this = this;\n            var pluginid = req.params.pluginid;\n            this.pluginsConfig.setPluginState(pluginid, function (err) {\n                if (err) {\n                    _this._log.error(\"SET_PLUGIN_STATE : \" + err);\n                    res.header('Content-Type', 'application/json');\n                    return res.send({ 'error': true });\n                }\n                res.header('Content-Type', 'application/json');\n                return res.send({ 'error': false });\n            });\n        };\n        Server.prototype.setPluginsPosition = function (req, res) {\n            var _this = this;\n            var positions = req.body.positions;\n            this.pluginsConfig.setPluginsPosition(positions, function (err) {\n                if (err) {\n                    _this._log.error(\"SET_PLUGINS_POSITION : \" + err);\n                    res.header('Content-Type', 'application/json');\n                    return res.send({ 'error': true });\n                }\n                res.header('Content-Type', 'application/json');\n                return res.send({ 'error': false });\n            });\n        };\n        Server.prototype.setPluginName = function (req, res) {\n            var _this = this;\n            var pluginid = req.params.pluginid;\n            var name = req.body.name;\n            this.pluginsConfig.setPluginName(pluginid, name, function (err) {\n                if (err) {\n                    _this._log.error(\"SET_PLUGIN_NAME : \" + err);\n                    res.header('Content-Type', 'application/json');\n                    return res.send({ 'error': true });\n                }\n                res.header('Content-Type', 'application/json');\n                return res.send({ 'error': false });\n            });\n        };\n        Server.prototype.setPluginPanel = function (req, res) {\n            var _this = this;\n            var pluginid = req.params.pluginid;\n            var panel = req.body.panel;\n            this.pluginsConfig.setPluginPanel(pluginid, panel, function (err) {\n                if (err) {\n                    _this._log.error(\"SET_PLUGIN_PANEL : \" + err);\n                    res.header('Content-Type', 'application/json');\n                    return res.send({ 'error': true });\n                }\n                res.header('Content-Type', 'application/json');\n                return res.send({ 'error': false });\n            });\n        };\n        Server.prototype._sendConfigJson = function (req, res) {\n            var _this = this;\n            var sessionid = req.params.idsession || \"default\";\n            this.pluginsConfig.getPluginsFor(sessionid, function (err, catalog) {\n                if (err) {\n                    _this._log.error(\"ROUTE : Error reading config.json file\");\n                    return;\n                }\n                var catalogdata = JSON.stringify(catalog);\n                res.header('Content-Type', 'application/json');\n                res.header('Access-Control-Allow-Origin', '*');\n                res.send(catalogdata);\n            });\n        };\n        Server.prototype._sendVorlonJSFile = function (ismin, req, res, autostart, nodeOnly) {\n            var _this = this;\n            if (autostart === void 0) { autostart = true; }\n            if (nodeOnly === void 0) { nodeOnly = false; }\n            var javascriptFile;\n            var sessionid = req.params.idsession || \"default\";\n            this.pluginsConfig.getPluginsFor(sessionid, function (err, catalog) {\n                if (err) {\n                    _this._log.error(\"ROUTE : Error getting plugins\");\n                    return;\n                }\n                var baseUrl = _this.baseURLConfig.baseURL;\n                var vorlonpluginfiles = \"\";\n                var javascriptFile = \"\";\n                javascriptFile += 'var vorlonBaseURL=\"' + baseUrl + '\";\\n';\n                //read the socket.io file if needed\n                if (nodeOnly) {\n                    javascriptFile += \"var io = require('socket.io-client');\\n\";\n                }\n                else if (catalog.includeSocketIO) {\n                    javascriptFile += fs.readFileSync(path.join(__dirname, \"../public/javascripts/socket.io-1.4.3.js\"));\n                }\n                if (ismin) {\n                    vorlonpluginfiles += fs.readFileSync(path.join(__dirname, \"../public/vorlon/vorlon-noplugin.js\"));\n                }\n                else {\n                    vorlonpluginfiles += fs.readFileSync(path.join(__dirname, \"../public/vorlon/vorlon-noplugin.max.js\"));\n                }\n                for (var pluginid = 0; pluginid < catalog.plugins.length; pluginid++) {\n                    var plugin = catalog.plugins[pluginid];\n                    if (plugin && plugin.enabled) {\n                        if (nodeOnly && !plugin.nodeCompliant) {\n                            continue;\n                        }\n                        //Read Vorlon.js file\n                        if (ismin) {\n                            vorlonpluginfiles += fs.readFileSync(path.join(__dirname, \"../public/vorlon/plugins/\" + plugin.foldername + \"/vorlon.\" + plugin.foldername + \".client.min.js\"));\n                        }\n                        else {\n                            vorlonpluginfiles += fs.readFileSync(path.join(__dirname, \"../public/vorlon/plugins/\" + plugin.foldername + \"/vorlon.\" + plugin.foldername + \".client.js\"));\n                        }\n                    }\n                }\n                vorlonpluginfiles = vorlonpluginfiles.replace('\"vorlon/plugins\"', '\"' + _this.httpConfig.protocol + '://' + req.headers.host + baseUrl + '/vorlon/plugins\"');\n                javascriptFile += \"\\r\" + vorlonpluginfiles;\n                javascriptFile += \"if (((typeof window != 'undefined' && window.module) || (typeof module != 'undefined')) && typeof module.exports != 'undefined') {\\r\\n\";\n                javascriptFile += \"module.exports = VORLON;};\\r\\n\";\n                var startUrl = _this.httpConfig.protocol + \"://\" + req.headers.host;\n                if (baseUrl) {\n                    var splittedBaseUrl = baseUrl.split('//');\n                    startUrl = splittedBaseUrl[splittedBaseUrl.length - 1] === _this.httpConfig.protocol ? baseUrl : startUrl + baseUrl;\n                }\n                if (autostart) {\n                    javascriptFile += \"\\r (function() { VORLON.Core.StartClientSide('\" + startUrl + \"/', '\" + req.params.idsession + \"'); }());\";\n                }\n                res.header('Content-Type', 'application/javascript');\n                res.header('Access-Control-Allow-Origin', '*');\n                res.send(javascriptFile);\n            });\n        };\n        Server.prototype.start = function (httpServer) {\n            var _this = this;\n            //SOCKET.IO\n            var io = socketio(httpServer, { path: this.baseURLConfig.baseURL + \"/socket.io\" });\n            this._io = io;\n            //Listen on /\n            this._io\n                .of(this.baseURLConfig.baseURL + \"/client\")\n                .on(\"connection\", function (socket) {\n                _this.addClient(socket);\n            });\n            //Listen on /dashboard\n            this._io\n                .of(this.baseURLConfig.baseURL + \"/dashboard\")\n                .on(\"connection\", function (socket) {\n                _this.addDashboard(socket);\n            });\n        };\n        Object.defineProperty(Server.prototype, \"io\", {\n            get: function () {\n                return this._io;\n            },\n            set: function (io) {\n                this._io = io;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Server.prototype.guid = function () {\n            return \"xxxxxxxx\".replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n                return v.toString(16);\n            });\n        };\n        Server.prototype.json = function (res, data) {\n            res.writeHead(200, { 'Content-Type': 'application/json; charset=utf-8' });\n            if (typeof data === \"string\")\n                res.write(data);\n            else\n                res.write(JSON.stringify(data));\n            res.end();\n        };\n        Server.prototype.addClient = function (socket) {\n            var _this = this;\n            socket.on(\"helo\", function (message) {\n                var receiveMessage = JSON.parse(message);\n                var metadata = receiveMessage.metadata;\n                var data = receiveMessage.data;\n                var session = _this._sessions.get(metadata.sessionId);\n                if (session == null) {\n                    session = new vorloncontext.VORLON.Session();\n                    _this._sessions.add(metadata.sessionId, session);\n                }\n                var client = session.connectedClients[metadata.clientId];\n                var dashboard = _this.dashboards[metadata.sessionId];\n                if (client == undefined) {\n                    var client = new vorloncontext.VORLON.Client(metadata.clientId, data.ua, data.noWindow, socket, ++session.nbClients);\n                    client.identity = data.identity;\n                    session.connectedClients[metadata.clientId] = client;\n                    _this._log.debug(formatLog(\"PLUGIN\", \"Send Add Client to dashboard (\" + client.displayId + \")[\" + data.ua + \"] socketid = \" + socket.id, receiveMessage));\n                    if (dashboard != undefined) {\n                        dashboard.emit(\"addclient\", client.data);\n                    }\n                    _this._log.debug(formatLog(\"PLUGIN\", \"New client (\" + client.displayId + \")[\" + data.ua + \"] socketid = \" + socket.id, receiveMessage));\n                }\n                else {\n                    client.socket = socket;\n                    client.opened = true;\n                    client.identity = data.identity;\n                    if (dashboard != undefined) {\n                        dashboard.emit(\"addclient\", client.data);\n                    }\n                    _this._log.debug(formatLog(\"PLUGIN\", \"Client Reconnect (\" + client.displayId + \")[\" + data.ua + \"] socketid=\" + socket.id, receiveMessage));\n                }\n                _this._sessions.update(metadata.sessionId, session);\n                _this._log.debug(formatLog(\"PLUGIN\", \"Number clients in session : \" + (session.nbClients + 1), receiveMessage));\n                //If dashboard already connected to this socket send \"helo\" else wait\n                if ((metadata.clientId != \"\") && (metadata.clientId == session.currentClientId)) {\n                    _this._log.debug(formatLog(\"PLUGIN\", \"Send helo to client to open socket : \" + metadata.clientId, receiveMessage));\n                }\n                else {\n                    _this._log.debug(formatLog(\"PLUGIN\", \"New client (\" + client.displayId + \") wait...\", receiveMessage));\n                }\n            });\n            socket.on(\"message\", function (message) {\n                //this._log.warn(\"CLIENT message \" + message);\n                var receiveMessage = JSON.parse(message);\n                var dashboard = _this.dashboards[receiveMessage.metadata.sessionId];\n                if (dashboard != null) {\n                    var session = _this._sessions.get(receiveMessage.metadata.sessionId);\n                    if (receiveMessage.metadata.clientId === \"\") {\n                    }\n                    else {\n                        //Send message if _clientID = clientID selected by dashboard\n                        if (session && receiveMessage.metadata.clientId === session.currentClientId) {\n                            dashboard.emit(\"message\", message);\n                            _this._log.debug(formatLog(\"PLUGIN\", \"PLUGIN=>DASHBOARD\", receiveMessage));\n                        }\n                        else {\n                            _this._log.error(formatLog(\"PLUGIN\", \"must be disconnected\", receiveMessage));\n                        }\n                    }\n                }\n                else {\n                    _this._log.error(formatLog(\"PLUGIN\", \"no dashboard found\", receiveMessage));\n                }\n            });\n            socket.on(\"clientclosed\", function (message) {\n                _this._log.warn(\"CLIENT clientclosed \" + message);\n                var receiveMessage = JSON.parse(message);\n                _this._sessions.all().forEach(function (session) {\n                    for (var clientid in session.connectedClients) {\n                        var client = session.connectedClients[clientid];\n                        if (_this.baseURLConfig.baseURL + \"/client#\" + receiveMessage.data.socketid === client.socket.id) {\n                            client.opened = false;\n                            if (_this.dashboards[session.sessionId]) {\n                                _this._log.debug(formatLog(\"PLUGIN\", \"Send RemoveClient to Dashboard \" + socket.id, receiveMessage));\n                                _this.dashboards[session.sessionId].emit(\"removeclient\", client.data);\n                            }\n                            else {\n                                _this._log.debug(formatLog(\"PLUGIN\", \"NOT sending RefreshClients, no Dashboard \" + socket.id, receiveMessage));\n                            }\n                            _this._log.debug(formatLog(\"PLUGIN\", \"Client Close \" + socket.id, receiveMessage));\n                        }\n                    }\n                    _this._sessions.update(session.sessionId, session);\n                });\n            });\n        };\n        Server.prototype.addDashboard = function (socket) {\n            var _this = this;\n            socket.on(\"helo\", function (message) {\n                //this._log.warn(\"DASHBOARD helo \" + message);\n                var receiveMessage = JSON.parse(message);\n                var metadata = receiveMessage.metadata;\n                var dashboard = _this.dashboards[metadata.sessionId];\n                if (dashboard == null) {\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"New Dashboard\", receiveMessage));\n                }\n                else {\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"Reconnect\", receiveMessage));\n                }\n                _this.dashboards[metadata.sessionId] = socket;\n                dashboard = socket;\n                //if client listen by dashboard send helo to selected client\n                if (metadata.listenClientId !== \"\") {\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"Client selected for :\" + metadata.listenClientId, receiveMessage));\n                    var session = _this._sessions.get(metadata.sessionId);\n                    if (session != undefined) {\n                        _this._log.debug(formatLog(\"DASHBOARD\", \"Change currentClient \" + metadata.clientId, receiveMessage));\n                        session.currentClientId = metadata.listenClientId;\n                        for (var clientId in session.connectedClients) {\n                            var client = session.connectedClients[clientId];\n                            if (client.clientId === metadata.listenClientId) {\n                                if (client.socket != null) {\n                                    _this._log.debug(formatLog(\"DASHBOARD\", \"Send helo to socketid :\" + client.socket.id, receiveMessage));\n                                    client.socket.emit(\"helo\", metadata.listenClientId);\n                                }\n                            }\n                            else {\n                                _this._log.debug(formatLog(\"DASHBOARD\", \"Wait for socketid (\" + client.socket.id + \")\", receiveMessage));\n                            }\n                        }\n                        //Send Helo to DashBoard\n                        _this._log.debug(formatLog(\"DASHBOARD\", \"Send helo to Dashboard\", receiveMessage));\n                        socket.emit(\"helo\", metadata.listenClientId);\n                    }\n                }\n                else {\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"No client selected for this dashboard\"));\n                    if (session != undefined) {\n                        _this._sessions.update(metadata.sessionId, session);\n                    }\n                }\n            });\n            socket.on(\"reload\", function (message) {\n                //this._log.warn(\"DASHBOARD reload \" + message);\n                var receiveMessage = JSON.parse(message);\n                var metadata = receiveMessage.metadata;\n                //if client listen by dashboard send reload to selected client\n                if (metadata.listenClientId !== \"\") {\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"Client selected for :\" + metadata.listenClientId, receiveMessage));\n                    var session = _this._sessions.get(metadata.sessionId);\n                    if (session != undefined) {\n                        _this._log.debug(formatLog(\"DASHBOARD\", \"Change currentClient \" + metadata.clientId, receiveMessage));\n                        session.currentClientId = metadata.listenClientId;\n                        for (var clientId in session.connectedClients) {\n                            var client = session.connectedClients[clientId];\n                            if (client.clientId === metadata.listenClientId) {\n                                if (client.socket != null) {\n                                    _this._log.debug(formatLog(\"DASHBOARD\", \"Send reload to socketid :\" + client.socket.id, receiveMessage));\n                                    client.socket.emit(\"reload\", metadata.listenClientId);\n                                }\n                            }\n                            else {\n                                _this._log.debug(formatLog(\"DASHBOARD\", \"Wait for socketid (\" + client.socket.id + \")\", receiveMessage));\n                            }\n                        }\n                    }\n                }\n                else {\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"No client selected for this dashboard\"));\n                    if (session != undefined) {\n                        _this._sessions.update(metadata.sessionId, session);\n                    }\n                }\n            });\n            socket.on(\"protocol\", function (message) {\n                //this._log.warn(\"DASHBOARD protocol \" + message);\n                var receiveMessage = JSON.parse(message);\n                var metadata = receiveMessage.metadata;\n                var dashboard = _this.dashboards[metadata.sessionId];\n                if (dashboard == null) {\n                    _this._log.error(formatLog(\"DASHBOARD\", \"No Dashboard to send message\", receiveMessage));\n                }\n                else {\n                    dashboard.emit(\"message\", message);\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"Dashboard send message\", receiveMessage));\n                }\n            });\n            socket.on(\"identify\", function (message) {\n                //this._log.warn(\"DASHBOARD identify \" + message);\n                var receiveMessage = JSON.parse(message);\n                var metadata = receiveMessage.metadata;\n                _this._log.debug(formatLog(\"DASHBOARD\", \"Identify clients\", receiveMessage));\n                var session = _this._sessions.get(metadata.sessionId);\n                if (session != null) {\n                    var nbClients = 0;\n                    for (var client in session.connectedClients) {\n                        var currentclient = session.connectedClients[client];\n                        if (currentclient.opened) {\n                            currentclient.socket.emit(\"identify\", currentclient.displayId);\n                            _this._log.debug(formatLog(\"DASHBOARD\", \"Dashboard send identify \" + currentclient.displayId + \" to socketid : \" + currentclient.socket.id, receiveMessage));\n                            nbClients++;\n                        }\n                    }\n                    _this._log.debug(formatLog(\"DASHBOARD\", \"Send \" + session.nbClients + \" identify(s)\", receiveMessage));\n                }\n                else {\n                    _this._log.error(formatLog(\"DASHBOARD\", \" No client to identify...\", receiveMessage));\n                    if (session != undefined) {\n                        _this._sessions.update(metadata.sessionId, session);\n                    }\n                }\n            });\n            socket.on(\"message\", function (message) {\n                //this._log.warn(\"DASHBOARD message \" + message);\n                var receiveMessage = JSON.parse(message);\n                var metadata = receiveMessage.metadata;\n                var arrayClients = _this._sessions.get(metadata.sessionId);\n                if (arrayClients != null) {\n                    for (var clientId in arrayClients.connectedClients) {\n                        var client = arrayClients.connectedClients[clientId];\n                        if (metadata.listenClientId === client.clientId) {\n                            client.socket.emit(\"message\", message);\n                            _this._log.debug(formatLog(\"DASHBOARD\", \"DASHBOARD=>PLUGIN\", receiveMessage));\n                        }\n                    }\n                }\n                else {\n                    _this._log.error(formatLog(\"DASHBOARD\", \"No client for message\", receiveMessage));\n                    var session = _this._sessions.get(metadata.sessionId);\n                    if (session != undefined) {\n                        _this._sessions.update(metadata.sessionId, session);\n                    }\n                }\n            });\n            socket.on(\"disconnect\", function (message) {\n                //this._log.warn(\"DASHBOARD disconnect \" + message);          \n                //Delete dashboard session\n                for (var dashboard in _this.dashboards) {\n                    if (_this.dashboards[dashboard].id === socket.id) {\n                        delete _this.dashboards[dashboard];\n                        _this._log.debug(formatLog(\"DASHBOARD\", \"Delete dashboard \" + dashboard + \" socket \" + socket.id));\n                    }\n                }\n                //Send disconnect to all client\n                _this._sessions.all().forEach(function (session) {\n                    for (var client in session.connectedClients) {\n                        session.connectedClients[client].socket.emit(\"stoplisten\");\n                    }\n                });\n            });\n        };\n        return Server;\n    }());\n    VORLON.Server = Server;\n    function formatLog(type, message, vmessage) {\n        var buffer = [];\n        buffer.push(type);\n        if (type.length < 10) {\n            for (var i = type.length; i < 10; i++) {\n                buffer.push(\" \");\n            }\n        }\n        buffer.push(\" : \");\n        if (vmessage) {\n            if (vmessage.metadata && vmessage.metadata.sessionId)\n                buffer.push(vmessage.metadata.sessionId + \" \");\n        }\n        if (message)\n            buffer.push(message + \" \");\n        if (vmessage) {\n            if (vmessage.metadata) {\n                if (vmessage.metadata.pluginID) {\n                    buffer.push(vmessage.metadata.pluginID);\n                    if (vmessage.command)\n                        buffer.push(\":\" + vmessage.command);\n                    buffer.push(\" \");\n                }\n                if (vmessage.metadata.clientId) {\n                    buffer.push(vmessage.metadata.clientId);\n                }\n            }\n        }\n        return buffer.join(\"\");\n    }\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/Scripts/vorlon.dashboard.js":"\"use strict\";\nvar XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\nvar fs = require(\"fs\");\nvar packageJson = require(\"../../package.json\");\nvar vauth = require(\"./vorlon.authentication\");\nvar config = require(\"../config/vorlon.configprovider\");\nvar VORLON;\n(function (VORLON) {\n    var Dashboard = (function () {\n        function Dashboard(context) {\n            this.baseURLConfig = context.baseURLConfig;\n            this._log = context.logger;\n        }\n        Dashboard.prototype.addRoutes = function (app, passport) {\n            var _this = this;\n            app.route(this.baseURLConfig.baseURL + '/').get(vauth.VORLON.Authentication.ensureAuthenticated, this.defaultDashboard());\n            app.route(this.baseURLConfig.baseURL + '/dashboard').get(vauth.VORLON.Authentication.ensureAuthenticated, this.defaultDashboard());\n            app.route(this.baseURLConfig.baseURL + '/dashboard/').get(vauth.VORLON.Authentication.ensureAuthenticated, this.defaultDashboard());\n            app.route(this.baseURLConfig.baseURL + '/dashboard/:sessionid').get(vauth.VORLON.Authentication.ensureAuthenticated, this.dashboard());\n            app.route(this.baseURLConfig.baseURL + '/dashboard/:sessionid/reset').get(vauth.VORLON.Authentication.ensureAuthenticated, this.dashboardServerReset());\n            app.route(this.baseURLConfig.baseURL + '/dashboard/:sessionid/:clientid').get(vauth.VORLON.Authentication.ensureAuthenticated, this.dashboardWithClient());\n            app.route(this.baseURLConfig.baseURL + '/config').get(vauth.VORLON.Authentication.ensureAuthenticated, this.dashboardConfig());\n            //login\n            app.post(this.baseURLConfig.baseURL + '/login', passport.authenticate('local', { failureRedirect: '/login',\n                successRedirect: '/',\n                failureFlash: false }));\n            app.route(this.baseURLConfig.baseURL + '/login').get(function (req, res) {\n                res.render('login', { baseURL: _this.baseURLConfig.baseURL, message: 'Please login' });\n            });\n            app.get(this.baseURLConfig.baseURL + '/logout', this.logout);\n        };\n        Dashboard.prototype.start = function (httpServer) {\n            //Not implemented\n        };\n        //Routes\n        Dashboard.prototype.defaultDashboard = function () {\n            var _this = this;\n            return function (req, res) {\n                res.redirect(_this.baseURLConfig.baseURL + '/dashboard/default');\n            };\n        };\n        Dashboard.prototype.dashboard = function () {\n            var _this = this;\n            return function (req, res) {\n                var authent = false;\n                var configastext = fs.readFileSync(config.VORLON.ConfigProvider.getConfigPath());\n                var catalog = JSON.parse(configastext.toString().replace(/^\\uFEFF/, ''));\n                if (catalog.activateAuth) {\n                    authent = catalog.activateAuth;\n                }\n                _this._log.debug(\"authenticated \" + authent);\n                res.render('dashboard', { baseURL: _this.baseURLConfig.baseURL, title: 'Dashboard', sessionid: req.params.sessionid, clientid: \"\", authenticated: authent, version: packageJson.version });\n            };\n        };\n        Dashboard.prototype.dashboardWithClient = function () {\n            var _this = this;\n            return function (req, res) {\n                res.render('dashboard', { baseURL: _this.baseURLConfig.baseURL, title: 'Dashboard', sessionid: req.params.sessionid, clientid: req.params.clientid, version: packageJson.version });\n            };\n        };\n        Dashboard.prototype.dashboardConfig = function () {\n            var _this = this;\n            return function (req, res) {\n                res.render('config', { baseURL: _this.baseURLConfig.baseURL, title: 'Configuration', sessionid: \"default\", clientid: \"\", version: packageJson.version });\n            };\n        };\n        Dashboard.prototype.getsession = function (req, res) {\n            return function (req, res) {\n                res.render('getsession', { title: 'Get Session' });\n            };\n        };\n        Dashboard.prototype.logout = function (req, res) {\n            req.logout();\n            res.redirect('/');\n        };\n        Dashboard.prototype.dashboardServerReset = function () {\n            var _this = this;\n            return function (req, res) {\n                var sessionid = req.params.sessionid;\n                var xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 200) {\n                            res.send(\"Done.\");\n                        }\n                    }\n                };\n                xhr.open(\"GET\", \"http://\" + req.headers.host + _this.baseURLConfig.baseURL + \"/api/reset/\" + sessionid);\n                xhr.send();\n            };\n        };\n        return Dashboard;\n    }());\n    VORLON.Dashboard = Dashboard;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n;\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/Scripts/vorlon.authentication.js":"\"use strict\";\nvar fs = require(\"fs\");\nvar config = require(\"../config/vorlon.configprovider\");\nvar VORLON;\n(function (VORLON) {\n    var Authentication = (function () {\n        function Authentication() {\n        }\n        Authentication.ensureAuthenticated = function (req, res, next) {\n            if (!Authentication.ActivateAuth || req.isAuthenticated()) {\n                return next();\n            }\n            res.redirect('/login');\n        };\n        Authentication.loadAuthConfig = function () {\n            fs.readFile(config.VORLON.ConfigProvider.getConfigPath(), \"utf8\", function (err, catalogdata) {\n                if (err) {\n                    return;\n                }\n                var catalog = JSON.parse(catalogdata.replace(/^\\uFEFF/, ''));\n                if (catalog.activateAuth) {\n                    Authentication.ActivateAuth = catalog.activateAuth;\n                }\n                if (catalog.username) {\n                    Authentication.UserName = catalog.username;\n                }\n                if (catalog.password) {\n                    Authentication.Password = catalog.password;\n                }\n            });\n        };\n        Authentication.ActivateAuth = false;\n        return Authentication;\n    }());\n    VORLON.Authentication = Authentication;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n;\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/Scripts/vorlon.webServer.js":"\"use strict\";\nvar express = require(\"express\");\nvar path = require(\"path\");\nvar stylus = require(\"stylus\");\nvar fs = require(\"fs\");\nvar vauth = require(\"./vorlon.authentication\");\nvar VORLON;\n(function (VORLON) {\n    var WebServer = (function () {\n        function WebServer(context) {\n            this._bodyParser = require(\"body-parser\");\n            this._cookieParser = require(\"cookie-parser\");\n            this._methodOverride = require(\"method-override\");\n            this._session = require(\"express-session\");\n            this._json = require(\"json\");\n            this._multer = require(\"multer\");\n            this._passport = require(\"passport\");\n            this._localStrategy = require(\"passport-local\");\n            this._twitterStrategy = require(\"passport-twitter\");\n            this._app = express();\n            this._components = new Array();\n            this.httpConfig = context.httpConfig;\n            this.baseURLConfig = context.baseURLConfig;\n            this._log = context.logger;\n        }\n        WebServer.prototype.init = function () {\n            for (var id in this._components) {\n                var component = this._components[id];\n                component.addRoutes(this._app, this._passport);\n            }\n        };\n        Object.defineProperty(WebServer.prototype, \"components\", {\n            get: function () {\n                return this._components;\n            },\n            set: function (comp) {\n                this._components = comp;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        WebServer.prototype.start = function () {\n            var _this = this;\n            var app = this._app;\n            //Command line\n            var stopExecution = false;\n            process.argv.forEach(function (val, index, array) {\n                var _this = this;\n                switch (val) {\n                    case \"--version\":\n                        fs.readFile(path.join(__dirname, \"../../package.json\"), \"utf8\", function (err, packageData) {\n                            if (err) {\n                                _this._log.error(\"Error reading package.json file\");\n                                return;\n                            }\n                            var _package = JSON.parse(packageData.replace(/^\\uFEFF/, ''));\n                            _this._log.info('Vorlon.js v' + _package.version);\n                        });\n                        stopExecution = true;\n                        break;\n                }\n            });\n            if (stopExecution) {\n                return;\n            }\n            var cors = require(\"cors\");\n            //Sets\n            app.set('host', this.httpConfig.host);\n            app.set('port', this.httpConfig.port);\n            app.set('views', path.join(__dirname, '../views'));\n            app.set('view engine', 'jade');\n            // Cors\n            var corsOptions = {\n                allowedHeaders: \"*\",\n                exposedHeaders: [\"X-VorlonProxyEncoding\", \"Content-Encoding\", \"Content-Length\"]\n            };\n            app.use(cors(corsOptions));\n            app.options('*', cors(corsOptions));\n            //Uses\n            this._passport.use(new this._localStrategy(function (username, password, done) {\n                // insert your MongoDB check here. For now, just a simple hardcoded check.\n                if (username === vauth.VORLON.Authentication.UserName && password === vauth.VORLON.Authentication.Password) {\n                    done(null, { user: username });\n                }\n                else {\n                    done(null, false);\n                }\n            }));\n            this._passport.serializeUser(function (user, done) {\n                done(null, user);\n            });\n            this._passport.deserializeUser(function (user, done) {\n                done(null, user);\n            });\n            app.use(stylus.middleware(path.join(__dirname, '../public')));\n            app.use(this.baseURLConfig.baseURL, express.static(path.join(__dirname, '../public')));\n            app.use(this._bodyParser.urlencoded({ extended: false }));\n            app.use(this._bodyParser.json());\n            app.use(this._cookieParser());\n            app.use(this._multer());\n            app.use(this._methodOverride());\n            app.use(this._session({\n                secret: '1th3is4is3as2e5cr6ec7t7keyf23or1or5lon5',\n                expires: false,\n                saveUninitialized: true,\n                resave: true }));\n            app.use(this._passport.initialize());\n            app.use(this._passport.session());\n            vauth.VORLON.Authentication.loadAuthConfig();\n            this.init();\n            if (this.httpConfig.useSSL) {\n                this._httpServer = this.httpConfig.httpModule.createServer(this.httpConfig.options, app).listen(app.get('port'), app.get('host'), undefined, function () {\n                    _this._log.info('Vorlon.js SERVER with SSL listening at ' + app.get('host') + ':' + app.get('port'));\n                });\n            }\n            else {\n                this._httpServer = this.httpConfig.httpModule.createServer(app).listen(app.get('port'), app.get('host'), undefined, function () {\n                    _this._log.info('Vorlon.js SERVER listening  at ' + app.get('host') + ':' + app.get('port'));\n                });\n            }\n            for (var id in this._components) {\n                var component = this._components[id];\n                component.start(this._httpServer);\n            }\n        };\n        Object.defineProperty(WebServer.prototype, \"httpServer\", {\n            get: function () {\n                return this._httpServer;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return WebServer;\n    }());\n    VORLON.WebServer = WebServer;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/Scripts/vorlon.httpproxy.server.js":"\"use strict\";\nvar express = require(\"express\");\nvar http = require(\"http\");\nvar https = require('https');\nvar url = require(\"url\");\nvar zlib = require(\"zlib\");\nvar cookieParser = require('cookie-parser');\nvar colors = require(\"colors\");\nvar httpProxy = require(\"http-proxy\");\nvar VORLON;\n(function (VORLON) {\n    var HttpProxy = (function () {\n        function HttpProxy(context, startProxyOnly) {\n            if (startProxyOnly === void 0) { startProxyOnly = false; }\n            this._proxy = null;\n            this._fetchproxy = null;\n            this._server = null;\n            this._proxyCookieName = \"vorlonProxyTarget\";\n            this._proxySessionCookieName = \"vorlonProxySession\";\n            this._vorlonScript = \"vorlon.max.js\";\n            this._passport = require(\"passport\");\n            this._startProxyOnly = false;\n            this._startProxyOnly = startProxyOnly;\n            this.baseURLConfig = context.baseURLConfig;\n            this.httpConfig = context.httpConfig;\n            this._log = context.logger;\n            this._proxy = httpProxy.createProxyServer({});\n            this._fetchproxy = httpProxy.createProxyServer({});\n        }\n        HttpProxy.prototype.insertVorlonScript = function (str, uri, _script, vorlonsessionid) {\n            var position = str.indexOf(\"<head\");\n            if (position > 0) {\n                var closing = str.indexOf(\">\", position) + 1;\n                this._log.debug(\"PROXY Injert vorlon script in website with SESSIONID \" + vorlonsessionid);\n                var beforehead = str.substr(0, closing);\n                var afterhead = str.substr(closing);\n                str = beforehead + \" \" + _script + afterhead;\n            }\n            return str;\n        };\n        HttpProxy.prototype.start = function () {\n            if (this._startProxyOnly) {\n                this.addRoutes(express(), this._passport);\n            }\n        };\n        HttpProxy.prototype.addRoutes = function (app, passport) {\n            if (!this._startProxyOnly) {\n                app.get(this.baseURLConfig.baseURL + \"/httpproxy/fetch\", this.fetchFile());\n                app.get(this.baseURLConfig.baseURL + \"/browserspecificcontent\", this.browserSpecificContent());\n                if (!this.httpConfig.enableWebproxy) {\n                    //the proxy is disabled, look at config.json to enable webproxy\n                    return;\n                }\n                app.get(this.baseURLConfig.baseURL + \"/httpproxy\", this.home());\n                app.get(this.baseURLConfig.baseURL + \"/httpproxy/inject\", this.inject());\n            }\n            this.startProxyServer();\n        };\n        HttpProxy.prototype.startProxyServer = function () {\n            var _this = this;\n            this._server = express();\n            this._server.set('host', this.httpConfig.proxyHost);\n            if (this.httpConfig.proxyEnvPort)\n                this._server.set('port', process.env.PORT);\n            else\n                this._server.set('port', this.httpConfig.proxyPort);\n            this._server.use(cookieParser());\n            this._server.use(this.baseURLConfig.baseProxyURL + \"/vorlonproxy/root.html\", this.proxyForTarget());\n            this._server.use(this.baseURLConfig.baseProxyURL + \"/vorlonproxy/*\", this.proxyForRelativePath());\n            this._server.use(this.baseURLConfig.baseProxyURL + \"/\", this.proxyForRootDomain());\n            // http.createServer(this._server).listen(this.httpConfig.proxyPort, () => {\n            //     console.log(\"Vorlon.js proxy started on port \" + this.httpConfig.proxyPort);\n            // });            \n            if (this.httpConfig.useSSL) {\n                https.createServer(this.httpConfig.options, this._server).listen(this._server.get('port'), this._server.get('host'), undefined, function () {\n                    _this._log.info('Vorlon.js PROXY with SSL listening at ' + _this._server.get('host') + ':' + _this._server.get('port'));\n                });\n            }\n            else {\n                http.createServer(this._server).listen(this._server.get('port'), this._server.get('host'), undefined, function () {\n                    _this._log.info('Vorlon.js PROXY listening at ' + _this._server.get('host') + ':' + _this._server.get('port'));\n                });\n            }\n            this._proxy.on(\"error\", this.proxyError.bind(this));\n            this._proxy.on(\"proxyRes\", this.proxyResult.bind(this));\n            this._proxy.on(\"proxyReq\", this.proxyRequest.bind(this));\n            this._fetchproxy.on(\"proxyReq\", this.proxyFetchRequest.bind(this));\n            this._fetchproxy.on(\"proxyRes\", this.proxyFetchResult.bind(this));\n        };\n        HttpProxy.prototype.vorlonClientFileUrl = function () {\n            var scriptUrl = \"http://localhost:\" + this.httpConfig.port + \"/\" + this._vorlonScript;\n            if (this.httpConfig.vorlonServerURL) {\n                scriptUrl = this.httpConfig.vorlonServerURL + \"/\" + this._vorlonScript;\n            }\n            return scriptUrl;\n        };\n        HttpProxy.prototype.browserSpecificContent = function () {\n            var _this = this;\n            return function (req, res) {\n                var userAgent = req.headers[\"user-agent\"];\n                var reply = function (browsername) {\n                    res.write('<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>Vorlon.js - Test page</title><script src=\"' + _this.vorlonClientFileUrl() + '\"></script></head><body><div>This is content for ' + browsername + '</div><div> ' + userAgent + '</div></body></html>');\n                    res.end();\n                };\n                if (userAgent == \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36\") {\n                    reply(\"Google Chrome\");\n                }\n                else if (userAgent == \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240\") {\n                    reply(\"Microsoft Edge\");\n                }\n                else if (userAgent == \"Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko\") {\n                    reply(\"IE 11\");\n                }\n                else {\n                    reply(\"Others\");\n                }\n            };\n        };\n        HttpProxy.prototype.fetchFile = function () {\n            var _this = this;\n            return function (req, res) {\n                var targetProxyUrl = req.query.fetchurl;\n                _this._log.debug(\"FETCH DOCUMENT \" + targetProxyUrl);\n                var opt = {\n                    target: targetProxyUrl,\n                    changeOrigin: true\n                };\n                res.setHeader(\"Content-Type\", \"text/plain\");\n                res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                res.setHeader('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                _this._fetchproxy.web(req, res, opt);\n            };\n        };\n        HttpProxy.prototype.proxyFetchRequest = function (proxyReq, req, res, opt) {\n            var e = proxyReq;\n            proxyReq.path = req.query.fetchurl;\n            if (req.query.fetchuseragent) {\n                proxyReq._headers[\"user-agent\"] = req.query.fetchuseragent;\n                this._log.debug(\"FETCH ISSUING UA REQUEST TO \" + proxyReq.path);\n            }\n            else {\n                this._log.debug(\"FETCH ISSUING REQUEST TO \" + proxyReq.path);\n            }\n        };\n        HttpProxy.prototype.proxyFetchResult = function (proxyRes, req, res) {\n            var writeHead = res.writeHead;\n            var encoding = proxyRes.headers[\"content-encoding\"] || \"none\";\n            res.writeHead = function () {\n                res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n                res.header('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range, X-VorlonProxyEncoding');\n                res.header('Expires', '-1');\n                res.header('Pragma', 'no-cache');\n                var encoding = proxyRes.headers[\"content-encoding\"] || \"none\";\n                res.header('X-VorlonProxyEncoding', encoding);\n                writeHead.apply(res, arguments);\n            };\n        };\n        //Routes\n        HttpProxy.prototype.proxyForRelativePath = function () {\n            var _this = this;\n            return function (req, res) {\n                //disable accept-encoding\n                //req.headers[\"accept-encoding\"] = \"\";\n                res.setHeader(\"Content-Type\", \"text/plain\");\n                res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                res.setHeader('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                var cookieUrl = req.cookies[_this._proxyCookieName];\n                var targetProxyUrl = req.baseUrl.substr(\"/vorlonproxy/\".length);\n                // var idx = targetProxyUrl.lastIndexOf('/');\n                // if (idx > -1){\n                //     targetProxyUrl = targetProxyUrl.substr(0, idx+1);\n                // }else{\n                //     targetProxyUrl = \"\";\n                // }\n                if (cookieUrl) {\n                    var uri = url.parse(cookieUrl);\n                    var target = uri.href;\n                    if (targetProxyUrl) {\n                        if (target[target.length - 1] != '/')\n                            target = target + '/';\n                        target = target + targetProxyUrl;\n                    }\n                    _this._log.debug(\"PROXY RELATIVE REQUEST from target \" + target + \" for \" + req.baseUrl);\n                    var opt = {\n                        target: target,\n                        changeOrigin: true\n                    };\n                    if (target.indexOf(\"https:\") === 0) {\n                        opt.secure = true;\n                    }\n                    _this._proxy.web(req, res, opt);\n                }\n                else {\n                    _this._log.warn(\"PROXY RELATIVE REQUEST but no target for \" + req.baseUrl);\n                }\n            };\n        };\n        HttpProxy.prototype.proxyForTarget = function () {\n            var _this = this;\n            return function (req, res) {\n                //disable accept-encoding\n                //req.headers[\"accept-encoding\"] = \"\";\n                res.setHeader(\"Content-Type\", \"text/plain\");\n                res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                res.setHeader('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                var targetProxyUrl = req.query.vorlonproxytarget;\n                if (!targetProxyUrl) {\n                    targetProxyUrl = req.cookies[_this._proxyCookieName];\n                }\n                if (targetProxyUrl) {\n                    _this._log.info(\"PROXY REQUEST from target \" + targetProxyUrl + \" for \" + req.baseUrl);\n                    var opt = {\n                        target: targetProxyUrl,\n                        changeOrigin: true\n                    };\n                    if (targetProxyUrl.indexOf(\"https:\") === 0) {\n                        opt.secure = true;\n                    }\n                    _this._proxy.web(req, res, opt);\n                }\n                else {\n                    _this._log.warn(\"PROXY REQUEST but no target\" + \" for \" + req.baseUrl);\n                }\n            };\n        };\n        HttpProxy.prototype.proxyForRootDomain = function () {\n            var _this = this;\n            return function (req, res) {\n                //disable accept-encoding\n                //req.headers[\"accept-encoding\"] = \"\";\n                res.setHeader(\"Content-Type\", \"text/plain\");\n                res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                res.setHeader('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                var cookieUrl = req.cookies[_this._proxyCookieName];\n                if (cookieUrl) {\n                    var uri = url.parse(cookieUrl);\n                    var target = uri.protocol + \"//\" + uri.hostname;\n                    _this._log.debug(\"PROXY REQUEST for root http domain \" + target);\n                    var opt = {\n                        target: target,\n                        changeOrigin: true\n                    };\n                    if (target.indexOf(\"https:\") === 0) {\n                        opt.secure = true;\n                    }\n                    _this._proxy.web(req, res, opt);\n                }\n                else {\n                    _this._log.warn(\"PROXY REQUEST from root but no cookie...\");\n                }\n            };\n        };\n        HttpProxy.prototype.home = function () {\n            var _this = this;\n            return function (req, res) {\n                res.render('httpproxy', { baseURL: _this.baseURLConfig.baseURL });\n            };\n        };\n        HttpProxy.prototype.inject = function () {\n            var _this = this;\n            return function (req, res) {\n                var uri = url.parse(req.query.url);\n                //res.cookie(this._proxyCookieName, uri.protocol + \"//\" + uri.hostname);\n                _this._log.debug(\"PROXY request for  \" + uri.hostname + \" to port \" + _this.httpConfig.proxyPort);\n                var rootUrl = \"http://localhost:\" + _this.httpConfig.proxyPort;\n                if (_this.httpConfig.vorlonProxyURL) {\n                    rootUrl = _this.httpConfig.vorlonProxyURL;\n                }\n                var sessionid = _this.vorlonSessionIdFor(uri.protocol + \"//\" + uri.hostname);\n                res.end(JSON.stringify({ url: rootUrl + \"/vorlonproxy/root.html?vorlonproxytarget=\" + encodeURIComponent(req.query.url) + \"&vorlonsessionid=\" + sessionid, session: sessionid }));\n            };\n        };\n        HttpProxy.prototype.vorlonSessionIdFor = function (targeturl, req) {\n            if (req && req.query.vorlonsessionid) {\n                return req.query.vorlonsessionid;\n            }\n            else if (req && req.cookies[this._proxySessionCookieName]) {\n                return req.cookies[this._proxySessionCookieName];\n            }\n            var uri = url.parse(targeturl);\n            var pat = /^(https?:\\/\\/)?(?:www\\.)?([^\\/]+)/;\n            var match = uri.href.match(pat);\n            var vorlonsessionid = match[2].replace(\".\", \"\");\n            return vorlonsessionid;\n        };\n        //Events HttpProxy\n        HttpProxy.prototype.proxyError = function (error, req, res) {\n            var json;\n            this._log.debug(\"proxy error\", error);\n            if (!res.headersSent) {\n                res.writeHead(500, { \"content-type\": \"application/json\" });\n            }\n            json = { error: \"proxy_error\", reason: error.message };\n            res.end(JSON.stringify(json));\n        };\n        HttpProxy.prototype.proxyRequest = function (proxyReq, req, res, opt) {\n            var e = proxyReq;\n            if (proxyReq.path[proxyReq.path.length - 1] == \"/\") {\n                proxyReq.path = proxyReq.path.substr(0, proxyReq.path.length - 1);\n            }\n            this._log.debug(\"PROXY ISSUING REQUEST TO \" + proxyReq.path);\n        };\n        HttpProxy.prototype.proxyResult = function (proxyRes, req, res) {\n            var _proxy = this;\n            var chunks, end = res.end, writeHead = res.writeHead, write = res.write;\n            var targetProxyUrl = req.query.vorlonproxytarget;\n            if (!targetProxyUrl) {\n                targetProxyUrl = req.cookies[this._proxyCookieName];\n            }\n            var cspHeader = proxyRes.headers[\"content-security-policy\"];\n            //TODO : manage content-security-policy header for script, ...\n            if (proxyRes.statusCode >= 300) {\n                this._log.warn(\"PROXY received status \" + proxyRes.statusCode + \" \" + proxyRes.statusMessage);\n                this._log.warn(proxyRes.req._header);\n            }\n            if (req.query.vorlonproxytarget && proxyRes.statusCode >= 300 && proxyRes.statusCode < 400) {\n                return this.proxyResultForRedirection(targetProxyUrl, proxyRes, req, res);\n            }\n            this._log.debug(\"PROXY content type \" + proxyRes.headers[\"content-type\"]);\n            if (targetProxyUrl && proxyRes.headers && proxyRes.headers[\"content-type\"] && proxyRes.headers[\"content-type\"].match(\"text/html\")) {\n                return this.proxyResultForPageContent(targetProxyUrl, proxyRes, req, res);\n            }\n            else {\n                var encoding = proxyRes.headers[\"content-encoding\"];\n                res.writeHead = function () {\n                    res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n                    res.header('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                    res.header('Expires', '-1');\n                    res.header('Pragma', 'no-cache');\n                    res.header(\"content-security-policy\", \"\");\n                    res.header(\"content-security-policy\", \"\");\n                    res.header('X-VorlonProxyEncoding', encoding || \"none\");\n                    writeHead.apply(res, arguments);\n                };\n            }\n        };\n        HttpProxy.prototype.proxyResultForRedirection = function (targetProxyUrl, proxyRes, req, res) {\n            var _proxy = this;\n            var chunks, end = res.end, writeHead = res.writeHead, write = res.write;\n            res.writeHead = function () {\n                res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n                res.header('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                res.header('Expires', '-1');\n                res.header('Pragma', 'no-cache');\n                res.header(\"content-security-policy\", \"\");\n                var location = res._headers[\"location\"];\n                location = location.substr(0, location.indexOf(\"?vorlonproxytarget=\"));\n                var vorlonsessionid = _proxy.vorlonSessionIdFor(targetProxyUrl, req);\n                res.header(\"location\", \"?vorlonproxytarget=\" + encodeURIComponent(location) + \"&vorlonsessionid=\" + encodeURIComponent(vorlonsessionid));\n                writeHead.apply(res, arguments);\n            };\n            return;\n        };\n        HttpProxy.prototype.proxyResultForPageContent = function (targetProxyUrl, proxyRes, req, res) {\n            var _proxy = this;\n            var chunks, end = res.end, writeHead = res.writeHead, write = res.write;\n            var encoding = proxyRes.headers[\"content-encoding\"];\n            var uri = url.parse(targetProxyUrl);\n            var vorlonsessionid = _proxy.vorlonSessionIdFor(targetProxyUrl, req);\n            //var scriptUrl = \"http://localhost:\" + this.httpConfig.port + \"/\" + this._vorlonScript + \"/\" + vorlonsessionid;\n            var _script = \"<script src=\\\"\" + this.vorlonClientFileUrl() + \"/\" + vorlonsessionid + \"/\\\"></script>\";\n            if (encoding == \"gzip\" || encoding == \"deflate\") {\n                this._log.debug(\"PROXY content is encoded to \" + encoding);\n                var uncompress = zlib.Gunzip();\n                if (encoding == \"deflate\")\n                    uncompress = zlib.Inflate();\n                res.writeHead = function () {\n                    if (proxyRes.headers && proxyRes.headers[\"content-length\"]) {\n                        res.setHeader(\"content-length\", parseInt(proxyRes.headers[\"content-length\"], 10) + _script.length);\n                    }\n                    res.setHeader(\"transfer-encoding\", \"\");\n                    res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n                    res.header('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                    res.header('Expires', '-1');\n                    res.header(\"content-security-policy\", \"\");\n                    res.header('Pragma', 'no-cache');\n                    res.header('Content-Encoding', '');\n                    //res.header('Content-Type', 'text/html; charset=utf-8');                    \n                    res.removeHeader('Content-Encoding');\n                    res.removeHeader('Content-Length');\n                    res.header('X-VorlonProxyEncoding', encoding || \"none\");\n                    //we must set cookie only if url was requested through Vorlon\n                    if (req.query.vorlonproxytarget) {\n                        _proxy._log.debug(\"set cookie \" + req.query.vorlonproxytarget);\n                        res.cookie(_proxy._proxyCookieName, req.query.vorlonproxytarget);\n                        res.cookie(_proxy._proxySessionCookieName, vorlonsessionid);\n                    }\n                    writeHead.apply(res, arguments);\n                };\n                res.write = function (data) {\n                    uncompress.write(data);\n                };\n                uncompress.on('data', function (data) {\n                    if (chunks) {\n                        chunks += data;\n                    }\n                    else {\n                        chunks = data;\n                    }\n                    return chunks;\n                });\n                uncompress.on('end', function (data) {\n                    if (chunks && chunks.toString) {\n                        var contentstring = chunks.toString();\n                        var tmp = _proxy.insertVorlonScript(contentstring, uri, _script, vorlonsessionid);\n                        write.apply(res, [tmp]);\n                    }\n                    end.apply(res);\n                });\n                res.end = function () {\n                    uncompress.end(arguments[0]);\n                };\n            }\n            else {\n                res.writeHead = function () {\n                    if (proxyRes.headers && proxyRes.headers[\"content-length\"]) {\n                        res.setHeader(\"content-length\", parseInt(proxyRes.headers[\"content-length\"], 10) + _script.length);\n                    }\n                    res.setHeader(\"transfer-encoding\", \"\");\n                    res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n                    res.header('Access-Control-Expose-Headers', 'Accept-Ranges, Content-Encoding, Content-Length, Content-Range');\n                    res.header('Expires', '-1');\n                    res.header('Pragma', 'no-cache');\n                    res.header(\"content-security-policy\", \"\");\n                    res.header('X-VorlonProxyEncoding', encoding || \"none\");\n                    //we must set cookie only if url was requested through Vorlon\n                    if (req.query.vorlonproxytarget) {\n                        _proxy._log.debug(\"set cookie \" + req.query.vorlonproxytarget);\n                        res.cookie(_proxy._proxyCookieName, req.query.vorlonproxytarget);\n                    }\n                    writeHead.apply(res, arguments);\n                };\n                res.write = function (data) {\n                    if (chunks) {\n                        chunks += data;\n                    }\n                    else {\n                        chunks = data;\n                    }\n                    return chunks;\n                };\n                res.end = function () {\n                    if (chunks && chunks.toString) {\n                        var tmp = _proxy.insertVorlonScript(chunks.toString(), uri, _script, vorlonsessionid);\n                        write.apply(res, [tmp]);\n                    }\n                    end.apply(res, arguments);\n                };\n            }\n        };\n        return HttpProxy;\n    }());\n    VORLON.HttpProxy = HttpProxy;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/Server/Scripts/vorlon.winstonlogger.js":"\"use strict\";\nvar winston = require(\"winston\");\nvar winstonDisplay = require(\"winston-logs-display\");\nvar VORLON;\n(function (VORLON) {\n    var WinstonLogger = (function () {\n        function WinstonLogger(context) {\n            this.logConfig = context.logConfig;\n            //LOGS      \n            winston.cli();\n            this._log = new winston.Logger({\n                levels: {\n                    info: 0,\n                    warn: 1,\n                    error: 2,\n                    verbose: 3,\n                    api: 4,\n                    dashboard: 5,\n                    plugin: 6\n                },\n                transports: [\n                    new winston.transports.File({ filename: this.logConfig.vorlonLogFile, level: this.logConfig.level })\n                ],\n                exceptionHandlers: [\n                    new winston.transports.File({ filename: this.logConfig.exceptionsLogFile, timestamp: true, maxsize: 1000000 })\n                ],\n                exitOnError: false\n            });\n            context.logger = this._log;\n            if (this.logConfig.enableConsole) {\n                this._log.add(winston.transports.Console, {\n                    level: this.logConfig.level,\n                    handleExceptions: true,\n                    json: false,\n                    timestamp: function () {\n                        var date = new Date();\n                        return date.getFullYear() + \"-\" +\n                            date.getMonth() + \"-\" +\n                            date.getDate() + \" \" +\n                            date.getHours() + \":\" +\n                            date.getMinutes() + \":\" +\n                            date.getSeconds();\n                    },\n                    colorize: true\n                });\n            }\n            winston.addColors({\n                info: 'green',\n                warn: 'cyan',\n                error: 'red',\n                verbose: 'blue',\n                api: 'gray',\n                dashboard: 'pink',\n                plugin: 'yellow'\n            });\n            this._log.cli();\n        }\n        WinstonLogger.prototype.addRoutes = function (app, passport) {\n            //DisplayLogs\n            winstonDisplay(app, this._log);\n        };\n        WinstonLogger.prototype.start = function (httpServer) {\n        };\n        return WinstonLogger;\n    }());\n    VORLON.WinstonLogger = WinstonLogger;\n})(VORLON = exports.VORLON || (exports.VORLON = {}));\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/VorlonNodeWrapper/wrapper.js":"var urljoin = require(\"url-join\");\r\n\r\n(function(){\r\n    exports.start = function(vorlonjsURL, dashboardId, async, callback){\r\n        if(dashboardId == undefined){\r\n            dashboardId = \"default\";\r\n        }\r\n                       \r\n        var XMLHttpRequest = require(\"xmlhttprequest\").XMLHttpRequest;\r\n        var xhr = new XMLHttpRequest();\r\n        var vorlonNodeUrl = urljoin(vorlonjsURL, \"vorlon.node.max.js/\" + dashboardId);\r\n        \r\n        if (async) {\r\n            xhr.onload = function (){\r\n                try {\r\n                    eval(xhr.responseText);\r\n                    VORLON.Core.StartClientSide(vorlonjsURL, dashboardId);                \r\n                    if (callback) {\r\n                        callback(true, \"n/a\");\r\n                    }            \r\n                }\r\n                catch(e){\r\n                    console.log(\"Wrapper Vorlon.js error : \" + e.message);\r\n                    if (callback) {\r\n                        callback(false, e.message);\r\n                    }            \r\n                }\r\n            };\r\n        }\r\n        \r\n        xhr.open(\"get\", vorlonNodeUrl, async);\r\n        xhr.send();\r\n        \r\n        if (!async) {\r\n            try {\r\n                eval(xhr.responseText);\r\n                VORLON.Core.StartClientSide(vorlonjsURL, dashboardId);                \r\n                if (callback) {\r\n                    callback(true, \"n/a\");\r\n                }            \r\n            }\r\n            catch(e){\r\n                console.log(\"Wrapper Vorlon.js error : \" + e.message);\r\n                if (callback) {\r\n                    callback(false, e.message);\r\n                }            \r\n            }\r\n        }\r\n    }\r\n})();","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/desktop/gulpfile.js":"'use strict';\r\n\r\nrequire('./tasks/build');\r\nrequire('./tasks/release');\r\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/desktop/tasks/build.js":"'use strict';\r\n\r\nvar pathUtil = require('path');\r\nvar Q = require('q');\r\nvar gulp = require('gulp');\r\nvar rollup = require('rollup');\r\nvar less = require('gulp-less');\r\nvar jetpack = require('fs-jetpack');\r\nvar typescript = require('gulp-typescript');\r\n\r\nvar utils = require('./utils');\r\nvar generateSpecsImportFile = require('./generate_specs_import');\r\n\r\nvar projectDir = jetpack;\r\nvar srcDir = projectDir.cwd('./app');\r\nvar destDir = projectDir.cwd('./build');\r\n\r\nvar paths = {\r\n    copyFromAppDir: [\r\n        './node_modules/**',\r\n        './assets/**',\r\n        './fonts/**',        \r\n        './vorlon/**',\r\n        './**/*.html',\r\n        './screens/**/*.js',\r\n        './screens/**/*.html',\r\n        './*.js'\r\n    ],\r\n}\r\n\r\n// -------------------------------------\r\n// Tasks\r\n// -------------------------------------\r\n\r\ngulp.task('clean', function(callback) {\r\n    return destDir.dirAsync('.', { empty: true });\r\n});\r\n\r\n\r\nvar copyTask = function () {\r\n    return projectDir.copyAsync('app', destDir.path(), {\r\n        overwrite: true,\r\n        matching: paths.copyFromAppDir\r\n    });\r\n};\r\ngulp.task('copy', ['clean'], copyTask);\r\ngulp.task('copy-watch', copyTask);\r\n\r\n\r\nvar bundle = function (src, dest) {\r\n    var deferred = Q.defer();\r\n\r\n    rollup.rollup({\r\n        entry: src\r\n    }).then(function (bundle) {\r\n        var jsFile = pathUtil.basename(dest);\r\n        var result = bundle.generate({\r\n            format: 'iife',\r\n            sourceMap: true,\r\n            sourceMapFile: jsFile,\r\n        });\r\n        return Q.all([\r\n            destDir.writeAsync(dest, result.code + '\\n//# sourceMappingURL=' + jsFile + '.map'),\r\n            destDir.writeAsync(dest + '.map', result.map.toString()),\r\n        ]);\r\n    }).then(function () {\r\n        deferred.resolve();\r\n    }).catch(function (err) {\r\n        console.error(err);\r\n    });\r\n\r\n    return deferred.promise;\r\n};\r\n\r\nvar bundleApplication = function () {\r\n    return Q.all([\r\n        bundle(srcDir.path('background.js'), destDir.path('background.js')),\r\n        bundle(srcDir.path('mainpage.js'), destDir.path('mainpage.js')),\r\n    ]);\r\n};\r\n\r\nvar bundleSpecs = function () {\r\n    generateSpecsImportFile().then(function (specEntryPointPath) {\r\n        return Q.all([\r\n            bundle(srcDir.path('background.js'), destDir.path('background.js')),\r\n            bundle(specEntryPointPath, destDir.path('spec.js')),\r\n        ]);\r\n    });\r\n};\r\n\r\nvar bundleTask = function () {\r\n    if (utils.getEnvName() === 'test') {\r\n        return bundleSpecs();\r\n    }\r\n    return bundleApplication();\r\n};\r\ngulp.task('bundle', ['clean'], bundleTask);\r\ngulp.task('bundle-watch', bundleTask);\r\n\r\ngulp.task('typescript-to-js', function() {\r\n  var tsResult = gulp.src(['./**/*.ts', '../typings/**/*.d.ts', '!**/node_modules', '!**/node_modules/**'], { cwd: './app' })\r\n                      .pipe(typescript({ noExternalResolve: true, target: 'ES5', module: 'commonjs' }));\r\n\r\n  return tsResult.js\r\n            .pipe(gulp.dest('build'));\r\n});\r\n\r\ngulp.task('dev-typescript-to-js', function() {\r\n  var tsResult = gulp.src(['./app/**/*.ts', './typings/**/*.d.ts', '!**/node_modules', '!**/node_modules/**'], { base: './' })\r\n                      .pipe(typescript({ noExternalResolve: true, target: 'ES5', module: 'commonjs' }));\r\n\r\n  return tsResult.js\r\n            .pipe(gulp.dest('.'));\r\n});\r\n\r\nvar lessTask = function () {\r\n    return gulp.src(['app/**/*.less'])\r\n    .pipe(less())\r\n    .pipe(gulp.dest(\"build\"));\r\n};\r\ngulp.task('less', ['clean'], lessTask);\r\ngulp.task('less-watch', lessTask);\r\n\r\nvar devlessTask = function () {\r\n    return gulp.src(['app/**/*.less'],  {base : '.'} )\r\n    .pipe(less())\r\n    .pipe(gulp.dest(''));\r\n};\r\ngulp.task('dev-less', devlessTask);\r\n\r\ngulp.task('finalize', ['clean'], function () {\r\n    var manifest = srcDir.read('package.json', 'json');\r\n    // Add \"dev\" or \"test\" suffix to name, so Electron will write all data\r\n    // like cookies and localStorage in separate places for each environment.\r\n    switch (utils.getEnvName()) {\r\n        case 'development':\r\n            manifest.name += '-dev';\r\n            manifest.productName += ' Dev';\r\n            break;\r\n        case 'test':\r\n            manifest.name += '-test';\r\n            manifest.productName += ' Test';\r\n            break;\r\n    }\r\n    destDir.write('package.json', manifest);\r\n\r\n    var configFilePath = projectDir.path('config/env_' + utils.getEnvName() + '.json');\r\n    destDir.copy(configFilePath, 'env_config.json');\r\n});\r\n\r\n\r\ngulp.task('watch', function () {\r\n    gulp.watch('app/**/*.js', ['bundle-watch']);\r\n    gulp.watch(paths.copyFromAppDir, { cwd: 'app' }, ['copy-watch']);\r\n    gulp.watch('app/**/*.less', ['less-watch']);\r\n});\r\n\r\ngulp.task('dev-watch', function () {\r\n    //gulp.watch('app/**/*.js', ['bundle-watch']);\r\n    //gulp.watch(paths.copyFromAppDir, { cwd: 'app' }, ['copy-watch']);\r\n    gulp.watch(['./app/**/*.ts', '!./node_modules', '!./node_modules/**'], ['dev-typescript-to-js']);\r\n    gulp.watch('app/**/*.less', ['dev-less']);\r\n});\r\n\r\n\r\ngulp.task('build', ['bundle', 'less', 'copy', 'finalize','typescript-to-js']);\r\n\r\ngulp.task('devbuild', ['dev-less','dev-typescript-to-js']);\r\n","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/disclaimer.js":"var colors = require('colors');\r\n\r\nconsole.log(\"Building vorlon.js...\");\r\nconsole.log('Please ignore errors regarding Python and socket.io. This is due to a known issue with socket.io. More info here: https://github.com/socketio/socket.io/issues/1151'.bgYellow);","/home/travis/build/npmtest/node-npmtest-vorlon/node_modules/vorlon/gulpfile.js":"var gulp = require('gulp'),\r\n    uglify = require('gulp-uglify'),\r\n    rename = require('gulp-rename'),\r\n    concat = require('gulp-concat'),\r\n    typescript = require('gulp-typescript'),\r\n    merge = require('merge2'),\r\n    webserver = require('gulp-webserver'),\r\n    less = require('gulp-less'),\r\n    gulputil = require('gulp-util'),\r\n    gulpFilter = require('gulp-filter'),\r\n    path = require('path'),\r\n    sourcemaps = require('gulp-sourcemaps'),\r\n    zip = require('gulp-zip');\r\n\r\n/// ********\r\n\r\n/// GLOBAL \r\n\r\ngulp.task('default', function(){\r\n  return gulp.start('default-server-all');\r\n});\r\n\r\ngulp.task('default-server-all', ['default-plugins', 'copyDTS-plugins'], function(){\r\n  return gulp.start('default-server');\r\n});\r\n\r\n\r\n//// *****\r\n\r\n//**** \r\n\r\n// PLUGIN PART\r\n\r\n// *** \r\n\r\n/**\r\n * Compile typescript files to their js respective files\r\n */\r\ngulp.task('typescript-to-js-plugins', function() {\r\n  //Compile all ts file into their respective js file.\r\n  \r\n  var tsResult = gulp.src(['Plugins/Vorlon/**/*.ts', 'Plugins/libs/**.ts'])\r\n                       .pipe(typescript({ \r\n                            declarationFiles: true,\r\n                            noExternalResolve: true, target: 'ES5'}\r\n                          ));\r\n  \r\n   return merge([\r\n      tsResult.dts.pipe(gulp.dest('Plugins/release')),\r\n      tsResult.js.pipe(gulp.dest('Plugins/release'))\r\n      ]);\r\n});\r\n\r\n\r\n /* Compile less files to their css respective files\r\n */\r\ngulp.task('less-to-css-plugins', function() {\r\n  return gulp.src(['Plugins/Vorlon/**/*.less'], { base : '.' })\r\n    .pipe(less())\r\n    .pipe(gulp.dest(''));  \r\n});\r\n\r\n/**\r\n * Concat all js files in order into one big js file and minify it.\r\n * Do not hesitate to update it if you need to add your own files.\r\n */\r\ngulp.task('scripts-noplugin-plugins', ['typescript-to-js-plugins'], function() {\r\n    return gulp.src([\r\n            'Plugins/libs/css.js',\r\n            'Plugins/release/vorlon.tools.js',\r\n            'Plugins/release/vorlon.enums.js',\r\n            'Plugins/release/vorlon.basePlugin.js',\r\n            'Plugins/release/vorlon.clientPlugin.js',\r\n            'Plugins/release/vorlon.dashboardPlugin.js',\r\n            'Plugins/release/vorlon.clientMessenger.js',\r\n            'Plugins/release/vorlon.core.js'\r\n        ])\r\n        .pipe(concat('vorlon-noplugin.max.js'))\r\n        .pipe(gulp.dest('Plugins/release/'))\r\n        .pipe(rename('vorlon-noplugin.js'))\r\n        .pipe(uglify())\r\n        .pipe(gulp.dest('Plugins/release/'));\r\n});\r\n\r\ngulp.task('concat-webstandards-rules-plugins', ['typescript-to-js-plugins'], function () {\r\n\treturn gulp.src(['./Plugins/release/**/webstandards/rules/*.js', './Plugins/release/**/webstandards/vorlon.webstandards.client.js'])\r\n\t\t.pipe(concat('vorlon.webstandards.client.js'))\r\n\t\t.pipe(gulp.dest('Plugins/release/plugins/webstandards/'));\r\n});\r\n\r\n/**\r\n * Specific task that need to be handled for specific plugins.\r\n * Do not hesitate to update it if you need to add your own files\r\n */\r\ngulp.task('scripts-specific-plugins-plugins', ['scripts-plugins'], function() {\r\n    // DOMTimeline\r\n    gulp.src([\r\n        'Plugins/Vorlon/plugins/domtimeline/mapping-system.js',\r\n        'Plugins/release/plugins/domtimeline/vorlon.domtimeline.dashboard.js',\r\n    ])\r\n        .pipe(concat('vorlon.domtimeline.dashboard.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/domtimeline/'));\r\n\tgulp.src([\r\n\t\t'Plugins/Vorlon/plugins/domtimeline/dom-timeline.js',\r\n        'Plugins/Vorlon/plugins/domtimeline/mapping-system.js',\r\n        'Plugins/release/plugins/domtimeline/vorlon.domtimeline.client.js',\r\n    ])\r\n        .pipe(concat('vorlon.domtimeline.client.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/domtimeline/'));\r\n\r\n\t\t\r\n    // Babylon Inspector\r\n    gulp.src([\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.interfaces.js',\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.client.js'\r\n    ])\r\n        .pipe(concat('vorlon.babylonInspector.client.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/babylonInspector/'));\r\n\r\n    gulp.src([\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.interfaces.js',\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.dashboard.js'\r\n    ])\r\n        .pipe(concat('vorlon.babylonInspector.dashboard.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/babylonInspector/'));\r\n        \r\n    gulp.src([\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.interfaces.min.js',\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.client.min.js'\r\n    ])\r\n        .pipe(concat('vorlon.babylonInspector.client.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/babylonInspector/'));\r\n\r\n    gulp.src([\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.interfaces.min.js',\r\n        'Plugins/release/plugins/babylonInspector/vorlon.babylonInspector.dashboard.min.js'\r\n    ])\r\n        .pipe(concat('vorlon.babylonInspector.dashboard.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/babylonInspector/'));\r\n\r\n    // Bot framework inspector\r\n    gulp.src([\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.interfaces.js',\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.client.js'\r\n    ])\r\n        .pipe(concat('vorlon.botFrameworkInspector.client.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/botFrameworkInspector/'));\r\n\r\n    gulp.src([\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.interfaces.js',\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.dashboard.js'\r\n    ])\r\n        .pipe(concat('vorlon.botFrameworkInspector.dashboard.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/botFrameworkInspector/'));\r\n        \r\n    gulp.src([\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.interfaces.min.js',\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.client.min.js'\r\n    ])\r\n        .pipe(concat('vorlon.botFrameworkInspector.client.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/botFrameworkInspector/'));\r\n\r\n    gulp.src([\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.interfaces.min.js',\r\n        'Plugins/release/plugins/botFrameworkInspector/vorlon.botFrameworkInspector.dashboard.min.js'\r\n    ])\r\n        .pipe(concat('vorlon.botFrameworkInspector.dashboard.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/botFrameworkInspector/'));\r\n        \r\n    // Office\r\n    gulp.src([\r\n        'Plugins/release/plugins/office/vorlon.office.interfaces.js',\r\n        'Plugins/release/plugins/office/vorlon.office.tools.js',\r\n        'Plugins/release/plugins/office/vorlon.office.document.js',\r\n        'Plugins/release/plugins/office/vorlon.office.outlook.js',\r\n        'Plugins/release/plugins/office/vorlon.office.powerpoint.js',\r\n        'Plugins/release/plugins/office/vorlon.office.dashboard.js'\r\n    ])\r\n        .pipe(concat('vorlon.office.dashboard.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/office/'));\r\n\r\n     gulp.src([\r\n        'Plugins/release/plugins/office/vorlon.office.interfaces.min.js',\r\n        'Plugins/release/plugins/office/vorlon.office.tools.min.js',\r\n        'Plugins/release/plugins/office/vorlon.office.document.min.js',\r\n        'Plugins/release/plugins/office/vorlon.office.outlook.min.js',\r\n        'Plugins/release/plugins/office/vorlon.office.powerpoint.min.js',\r\n        'Plugins/release/plugins/office/vorlon.office.dashboard.min.js'\r\n    ])\r\n        .pipe(concat('vorlon.office.dashboard.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/office/'));     \r\n           \r\n    // NG Inspector\r\n    gulp.src([\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.interfaces.js',\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.client.js'\r\n    ])\r\n        .pipe(concat('vorlon.ngInspector.client.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/ngInspector/'));\r\n\r\n    gulp.src([\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.interfaces.js',\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.dashboard.js'\r\n    ])\r\n        .pipe(concat('vorlon.ngInspector.dashboard.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/ngInspector/'));\r\n        \r\n    gulp.src([\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.interfaces.min.js',\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.client.min.js'\r\n    ])\r\n        .pipe(concat('vorlon.ngInspector.client.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/ngInspector/'));\r\n\r\n    return gulp.src([\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.interfaces.min.js',\r\n        'Plugins/release/plugins/ngInspector/vorlon.ngInspector.dashboard.min.js'\r\n    ])\r\n        .pipe(concat('vorlon.ngInspector.dashboard.min.js'))\r\n        .pipe(gulp.dest('Plugins/release/plugins/ngInspector/'));\r\n\r\n});\r\n\r\n/**\r\n * Minify all plugins.\r\n * Do not hesitate to update it if you need to add your own files.\r\n */\r\ngulp.task('scripts-plugins', ['concat-webstandards-rules-plugins'], function () {\r\n\r\n    return gulp.src([\r\n            './Plugins/**/vorlon.*.js',\r\n            '!./Plugins/**/vorlon.*.min.js'\r\n        ])\r\n        .pipe(rename(function (path) {\r\n                path.extname = \".min.js\";\r\n              })\r\n            )\r\n        .pipe(uglify())\r\n        .pipe(gulp.dest('./Plugins'));\r\n});\r\n\r\n/**\r\n * Move all files from Plugins to Server\r\n */\r\ngulp.task('copy-plugins', function () {\r\n\r\n    return gulp.src([\r\n            'Plugins/release/vorlon-noplugin.max.js',\r\n            'Plugins/release/vorlon-noplugin.js'\r\n        ])\r\n        .pipe(gulp.dest('./Server/public/vorlon'));\r\n\r\n});\r\n\r\ngulp.task('copyPlugins-plugins', function () {\r\n\r\n   return  gulp.src([\r\n          'Plugins/Vorlon/plugins/**/*.js',\r\n          'Plugins/Vorlon/plugins/**/*.css',\r\n          'Plugins/Vorlon/plugins/**/*.html',\r\n          'Plugins/Vorlon/plugins/**/*.png',\r\n          'Plugins/Vorlon/plugins/**/*.PNG',          \r\n          'Plugins/release/plugins/**/*.js'\r\n    ])\r\n        .pipe(gulp.dest('./Server/public/vorlon/plugins'));\r\n\r\n});\r\n\r\ngulp.task('copyDTS-plugins', function () {\r\n\r\n    return  gulp.src(['Plugins/release/*.d.ts'])\r\n      .pipe(gulp.dest('./Server/Scripts/typings/Vorlon'));\r\n      \r\n});\r\n\r\n/**\r\n * The default task, call the tasks: scripts, scripts-noplugin, copy, copyPlugins\r\n */\r\ngulp.task('default-plugins', ['scripts-plugins', 'scripts-noplugin-plugins', 'less-to-css-plugins', 'scripts-specific-plugins-plugins'], function() {\r\n    return gulp.start('copy-plugins', 'copyPlugins-plugins', 'copyDTS-plugins');\r\n});\r\n\r\n/**\r\n * Watch task, will call the default task if a js file is updated.\r\n */\r\n//gulp.task('watch', function() {\r\n//  gulp.watch('src/**/*.js', ['default']);\r\n//});\r\n\r\n/**\r\n * Watch typescript task, will call the default typescript task if a typescript file is updated.\r\n */\r\ngulp.task('watch-plugins', function() {\r\n  return gulp.watch([\r\n    'Plugins/Vorlon/**/*.ts',\r\n    'Plugins/Vorlon/**/*.less',\r\n    'Plugins/Vorlon/**/*.html'\r\n    //'Vorlon/plugins/**/*.*',\r\n  ], ['default-plugins']);\r\n});\r\n\r\n/**\r\n * Web server task to serve a local test page\r\n */\r\ngulp.task('webserver', function() {\r\n  return gulp.src('client samples/webpage')\r\n    .pipe(webserver({\r\n      livereload: false,\r\n      open: 'http://localhost:1338/index.html',\r\n      port: 1338,\r\n      fallback: 'index.html'\r\n    }));\r\n});\r\n\r\n//**** \r\n\r\n// SERVER PART\r\n\r\n// *** \r\n\r\ngulp.task('typescript-to-js-server', function() {\r\n  var tsResult = gulp.src(['./Server/**/*.ts', '!./Server/node_modules', '!./Server/node_modules/**'], { base: './' })\r\n                     // .pipe(sourcemaps.init())\r\n                      .pipe(typescript({ noExternalResolve: true, target: 'ES5', module: 'commonjs' }));\r\n\r\n  return tsResult.js\r\n            .pipe(sourcemaps.write({\r\n              includeContent: false,\r\n              // Return relative source map root directories per file.\r\n              sourceRoot: function (file) {\r\n                // var sourceFile = path.join(file.cwd, file.sourceMap.file);\r\n                // return path.relative(path.dirname(sourceFile), file.cwd);\r\n              }\r\n            }))\r\n            .pipe(gulp.dest('.'));\r\n});\r\n\r\ngulp.task('build-server', ['typescript-to-js-server'], function() {\r\n\t//copy server files to desktop app\r\n  return gulp.src([\r\n  \t\t'./server/**/*.*'\r\n  \t])\r\n  \t.pipe(gulp.dest('./desktop/app/vorlon'));\r\n});\r\n\r\ngulp.task('default-server', ['build-server'], function() {\r\n});\r\n\r\n/**\r\n * Watch typescript task, will call the default typescript task if a typescript file is updated.\r\n */\r\ngulp.task('watch-server', function() {\r\n  gulp.watch([\r\n    './Server/**/*.ts',\r\n  ], ['default-server']);\r\n});\r\n\r\n\r\ngulp.task('watch', [\"watch-server\", \"watch-plugins\", \"webserver\"], function() {\r\n});\r\n\r\n/**\r\n * Zip task used within the build to create an archive that will be deployed using VSTS Release Management\r\n */\r\n\r\ngulp.task('zip', function() {\r\n    gulp.src(['./**/*', '!./DeploymentTools/**', '!./desktop/**', '!./plugins library/**', '!./Plugins/**', '!./Tests/**', '!./desktop', '!./plugins library', '!./DeploymentTools', '!./Plugins', '!./Tests'])\r\n        .pipe(zip('deployment-package.zip'))\r\n        .pipe(gulp.dest('DeploymentTools'));\r\n});"}